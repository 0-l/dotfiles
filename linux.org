* Sha Bang

  | Expression | Description                                                     |
  | #!         | locate an execute for the specified script (when an executable) |
  | !!         | executes last command                                           |
  | !*         | execute command with ALL the args passed to the last command    |
  | !^         | executes command with the FIRST arg passed to the last command  |
  | !$         | executes command with the LAST arg passed to the last command   |
  | !?keyword? | execute a command from history for the first pattern match      |
  | !-N        | execute command that was Nth position from the last in history  |

* Permissions
** chmod (change mode)
*** Group permissions
    
    | Group | Description  |
    |-------+--------------|
    | u     | user (owner) |
    | g     | group        |
    | o     | others       |
    | a     | all          |

*** Operators

    | Operator | Description         |
    |----------+---------------------|
    | +        | add permission      |
    | -        | remove permission   |
    | =        | override permission |

*** Octal notation

    | Octal | Description                             |
    |-------+-----------------------------------------|
    |     0 | nothing                                 |
    |     1 | execute                                 |
    |     2 | write                                   |
    |     3 | 1 + 2 (wx) write and execute            |
    |     4 | read                                    |
    |     5 | 4 + 1 (rx) read and execute             |
    |     6 | 4 + 3 (rw) read and write               |
    |     7 | 4 + 2 + 1 (rwx) read, write and execute |

*** Syntax
    
    | Command                               | Description                                                     |
    |---------------------------------------+-----------------------------------------------------------------|
    | chmod -R <specifications> <directory> | changing permissions of the contents of a directory recursively |
    | chmod og=+r                           | add read permission for the owner and group                     |
    | chmod a +rwx file                     | allow all user to read, write and execute                       |

** chown (Change Ownership)

   chown user1 filename     - changing ownership of a file to user1

** su (switch user)

   | Command | Description                                                |
   |---------+------------------------------------------------------------|
   | su -    | invokes a login shell, reseting most environment variables |
   | su      | normal shell                                               |
   | sudo su | switch to root                                             |

** sudo (superuser do)

  sudo will run a specific command with root level of permission

  =sudo !! (last command)= for instance

* Other commands
  
  | Command     | Description                                                                       |
  |-------------+-----------------------------------------------------------------------------------|
  | cd -        | go to the previous working directory                                              |
  | ls \*D      | pathname expansion, returns all files starting with D                             |
  | ls exe\*    | all files ending with 'exe'                                                       |
  | less <file> | view the contents of a file with a pager                                          |
  | head <file> | first several lines of a file (pass -n <numer-of-lines> to see N number of lines) |
  | tail <file> | last several lines of a file (pass -n <numer-of-lines> to see N number of lines)  |
  | uname       | show informations about the system (-a flag shows ALL info)                       |
  | du          | summarizes the *disk usage* of files                                              |
  | du -sh *    | summarizes every file in the current directory                                    |
  | df          | disk space of filesystem                                                          |
  | ps          | process status                                                                    |
  | killall <p> | terminates a process                                                              |
  | which       | searches for executables specified by the environment variable PATH               |
  | time        | time the execution of any program (eg. time node script.js)                       |
  | watch -n N  | runs a command infinitely each N seconds                                          |
  | apropos     | find a command that I'm unaware of (eg. apropos "list dir")                       |
  |             | use in conjuntion with (whatis) command                                           |
  | whereis     | searches for executables, source files and manual pages                           |
  | diff        | compares files, and lists their difference                                        |
  | find        | find files in directory (eg. find -name README.md)                                |
  
* Fix typos
  
  Instead of retyping a long list of arguments of a mispelled command,
  we can correct whatever typo we made with =^typo^correct=
  
  =$ dc /tmp=
  
  =$ ^dc^cd=

* File Compression
  
  | Flags             | Description                                                   |
  |-------------------+---------------------------------------------------------------|
  | -c --create       | create a new archive                                          |
  | -x --extract      | extract files from an archive                                 |
  | -t --list         | list the contents of an archive                               |
  | -f --file=ARCHIVE | use archive file                                              |
  | -v --verbose      | list files being processed                                    |
  | -z                | compress the archive with gzip  (faster, but compresses less) |
  | -j                | compress the archive with bzip2 (slower, but compresses more) |
  | --exclude <path>  | ignores subfolder                                             |

** Syntax

   | Command                                                   | Description                                             |
   |-----------------------------------------------------------+---------------------------------------------------------|
   | tar -cf ./archive.tar ./folder                            | creates an archive from a folder                        |
   | tar -lf ./archive.tar                                     | lists the contents of the archive without extracting it |
   | tar -xvf ./archive.tar                                    | extracts the archive                                    |
   | tar -cf archive.tar ./folder --exclude "folder/subfolder" | ignores subfolder inside my-folder                      |
   | tar -czvf archive.tar.gz ./folder                         | creates a gzip archive                                  |
   | tar -cjvf archive.tar.bz2 ./folder                        | creates a bzip2 archive                                 |
   | gunzip <filename>                                         | un-compresses files compressed by gzip                  |
   | gzcat  <filename>                                         | look at a gzipped file without having to gunzip it      |
   | gzip   <filename>                                         | compresses a file to gzip format                        |
   | bzip2  <filename>                                         | compresses a file to bzip2 format                       |
  
* Comma and Braces Operators
  
  We can use comma and braces to:
  - rename and backup operations
  - pattern matching
    
  To backup settings.conf to settings.conf.bak:

    =cp settings.conf{,.bak}=
    
  To revert the file from settings.conf.bak to settings.conf:
  
    =mv settings.conf{.bak,}=
    
  Other uses:

  =echo foo{1,2,3}.txt= outputs =foo1.txt, foo2.txt, foo3.txt=
  
  =echo file-{a..b}.txt= outputs =file-a.txt file-b.txt file-c.txt file-d.txt=
  
  =mv program.{c,exe} bin/=
    
* Chaining Operators
  - *&* (Ampersand Operator)

    run one or more commands in the background,

    EXAMPLE: ping www.google.com &
             apt-get update & apt-get upgrade &
    
  - *;* (Semi-colon operator)

    run several commands at once sequentially, disregarding the exit status of the preceding command

    EXAMPLE: apt-get update ; apt-get upgrade ; mkdir test

  - *&&* (AND operator)

    executes a command IF the exit status of the preceding command is 0

    EXAMPLE: ping www.google.com && links www.google.com    (checking the connection before using links command)
    
  - *||* (OR operator)
    
    much like an 'else' statement, allows to execute the second command only if the execution
    of the first fails (i.e., the exit status is 1)
    
    EXAMPLE: apt-get update || links www.google.com

  - *!* (NOT operator)
    
    much like an 'except' statement, this command will execute all except the condition provided
    
    EXAMPLE: rm -r !(*.html)      removes all files in a folder except .html files
    
  - *|* (PIPE operator)

    passes the output of the first command to the second one

    EXAMPLE: ls -l | less
    
  - *{}* (Command Combination operator)

    combine two or more commands

    [ -d Folder] || { echo creating Folder; mkdir Folder; } && echo Folder exists.

* RegEx Tools

- *grep* (Globally search for a Regular Expression and Print)
  for searching stuff in files, or any STDOUT (eg. 'ls' command)
  
  EXAMPLE: ls | grep "\.exe$"
  
- *sed* (stream editor)
  for substitituing, deleting or filtering text on a stream
  
  EXAMPLE: sed 's/regexp/replacement/g' file > output
  
  -r will extend the Regex portability (POSIX)
  
- *xargs* (command args)
  pass any command to it and it will execute it on a stream.
  
  EXAMPLE: find | grep "\.exe$" | xargs ls -lh
  
* Bash

  [ -d Folder ]    checks if a folder exists
  
